const Blogs = () => {
  return (
    <div className="min-h-screen my-8 lg:my-16 space-y-8">
      <h1 className="text-2xl lg:text-4xl text-center font-medium">Blogs</h1>
      <div className="xl:max-w-[1200px] xl:mx-auto mx-6 lg:mx-10 grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-10 ">
        {/* 1 */}
        <div className="p-3 lg:p-4 rounded-xl shadow-xl space-y-4">
          <h2 className="text-base lg:text-lg font-medium">
            1. What is an access token and refresh token? How do they work and
            where should we store them on the client-side?
          </h2>
          <p className="text-sm lg:text-base">
            An access token is a credential that is used to authorize a client
            to access protected resources on a server. It is typically a string
            of characters that is generated by an authentication server upon
            successful authentication of the client. The access token is then
            sent with each subsequent request to the server to access protected
            resources, acting as proof of the client's authorization. The server
            validates the access token to determine if the client has the
            necessary permissions to access the requested resource.
          </p>
          <p className="text-sm lg:text-base">
            A refresh token, on the other hand, is a credential that is used to
            obtain a new access token after the previous one expires. Access
            tokens have a limited lifespan for security reasons, and when they
            expire, the client can use the refresh token to obtain a new access
            token without requiring the user to reauthenticate. Refresh tokens
            are typically long-lived and are securely stored by the client, as
            they have the ability to request new access tokens on behalf of the
            user.
          </p>
          <p className="text-sm lg:text-base">
            When it comes to storing access tokens and refresh tokens on the
            client-side, it is important to prioritize security. Access tokens
            and refresh tokens should be stored securely to prevent unauthorized
            access. One common approach is to store them in memory using a
            secure storage mechanism provided by the client's programming
            language or framework. Storing tokens in memory ensures that they
            are cleared when the application or browser session ends.
            Additionally, you can use techniques like encryption or tokenization
            to further enhance the security of the tokens. It is crucial to
            avoid storing tokens in local storage or cookies, as they can be
            vulnerable to cross-site scripting (XSS) attacks.
          </p>
        </div>
        {/* 2 */}
        <div className="p-3 lg:p-4 rounded-xl shadow-xl space-y-4">
          <h2 className="text-base lg:text-lg font-medium">
            2. Compare SQL and NoSQL databases?
          </h2>
          <p className="text-sm lg:text-base">
            SQL (Structured Query Language) and NoSQL (Not only SQL) are two
            different types of database management systems, each with its own
            characteristics and use cases.
          </p>
          <p className="text-sm lg:text-base">
            SQL databases are based on the relational model and use tables with
            predefined schemas to store and organize data. They enforce strong
            consistency, ACID (Atomicity, Consistency, Isolation, Durability)
            properties, and support complex querying through SQL. SQL databases
            are well-suited for applications that require complex transactions,
            need to maintain data integrity, and have structured data with fixed
            schemas, such as financial systems or inventory management.
          </p>
          <p className="text-sm lg:text-base">
            NoSQL databases, on the other hand, provide a more flexible and
            scalable approach to storing and retrieving data. They are designed
            to handle large amounts of unstructured or semi-structured data,
            making them suitable for applications with high scalability and
            performance requirements, such as social media platforms or
            real-time analytics. NoSQL databases offer a variety of data models,
            including key-value, document, columnar, and graph databases, which
            allow for schema-less data and horizontal scalability. However,
            NoSQL databases may sacrifice some consistency guarantees in favor
            of scalability and availability.
          </p>
        </div>
        {/* 3 */}
        <div className="p-3 lg:p-4 rounded-xl shadow-xl space-y-4">
          <h2 className="text-base lg:text-lg font-medium">
            3. What is express js? What is Nest JS?
          </h2>
          <p className="text-sm lg:text-base">
            Express.js is a popular and minimalist web application framework for
            Node.js. It provides a straightforward and flexible approach to
            building web applications and APIs. Express.js simplifies the
            process of handling HTTP requests and responses, routing, and
            middleware integration. It allows developers to quickly set up
            server-side logic and define routes for different endpoints.
            Express.js is known for its simplicity and extensive middleware
            ecosystem, which enables developers to add various functionalities
            such as authentication, logging, and error handling to their
            applications.
          </p>
          <p className="text-sm lg:text-base">
            NestJS, on the other hand, is a progressive, modular, and
            TypeScript-based framework for building scalable and maintainable
            server-side applications. It is inspired by Angular's architecture
            and brings its concepts to the backend. NestJS combines the use of
            decorators, modules, dependency injection, and TypeScript to provide
            a structured and organized approach to building applications. It
            includes built-in support for features like routing, HTTP request
            handling, dependency injection, and more. NestJS is often used to
            create enterprise-grade applications with a focus on scalability,
            maintainability, and code reusability. It also has a strong
            ecosystem and provides out-of-the-box integration with various
            libraries and tools commonly used in the Node.js ecosystem.
          </p>
        </div>
        {/* 4 */}
        <div className="p-3 lg:p-4 rounded-xl shadow-xl space-y-4">
          <h2 className="text-base lg:text-lg font-medium">
            4. What is MongoDB aggregate and how does it work (google it)?
          </h2>
          <p className="text-sm lg:text-base">
            MongoDB's aggregate is a powerful aggregation framework that allows
            for advanced data processing and analysis within the database. It
            provides a flexible way to perform computations, transformations,
            and aggregations on data stored in MongoDB collections. The
            aggregate pipeline consists of multiple stages that can be chained
            together to create a data processing pipeline. Each stage performs a
            specific operation on the data, such as filtering, grouping,
            sorting, projecting, and performing calculations. The output of each
            stage is passed as input to the next stage, allowing for complex
            data manipulations and transformations. The aggregate framework
            supports a wide range of operations and operators, including
            arithmetic expressions, conditional statements, array manipulation,
            and text search, among others.
          </p>
          <p className="text-sm lg:text-base">
            To use the aggregate framework, developers define a sequence of
            stages that represent the desired data processing operations. These
            stages are passed as an array to the aggregate method in MongoDB.
            The stages are executed in the order they are specified, with the
            output of each stage serving as the input for the next stage. The
            result of the aggregate operation is a cursor, which can be iterated
            to retrieve the aggregated data. The aggregate framework provides a
            powerful and flexible way to perform complex data manipulations and
            analysis directly within the MongoDB database, reducing the need for
            data processing on the application side and improving performance.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Blogs;
